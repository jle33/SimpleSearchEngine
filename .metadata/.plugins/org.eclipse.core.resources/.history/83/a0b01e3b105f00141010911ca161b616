package GUI;

import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.*;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.List;

import javax.swing.BoxLayout;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.ListSelectionModel;
import javax.swing.SwingUtilities;

import SearchComponents.SearchEngine;

public class resultWindow extends JPanel {
	private JList<String> list;
	private DefaultListModel<String> listModel;
	private JButton btnClose;

	public resultWindow() {
		setLayout(new BorderLayout());
		listModel = new DefaultListModel<String>();
		list = new JList<String>(listModel);
		list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
		list.setSelectedIndex(0);
		listActions();
		List<String> results = SearchEngine.getqueryResult();
		list.setVisibleRowCount(results.size());

		for(String docs : results) {
			listModel.addElement(docs);
		}
		JScrollPane listScrollPane = new JScrollPane(list);
		listScrollPane.setPreferredSize(new Dimension(480, 360));
		btnClose = new JButton("Close");
		btnCloseActions();
		btnClose.setEnabled(true);

		JPanel resultPanel = new JPanel();
		resultPanel.setLayout(new BoxLayout(resultPanel, BoxLayout.PAGE_AXIS));
		btnClose.setAlignmentX(Component.CENTER_ALIGNMENT);
		resultPanel.add(btnClose);

		add(listScrollPane, BorderLayout.CENTER);
		add(resultPanel, BorderLayout.PAGE_END);
	}

	private void close() {
		//Find the JFrame holding this panel
		JFrame parentFrame = (JFrame) SwingUtilities.getWindowAncestor(this);
		//Close current result window only.
		parentFrame.dispose();
	}

	private void openSelectedFile(int index){
		if(index >= 0) {
			if(Desktop.isDesktopSupported()) {
				String doc = list.getModel().getElementAt(index);
				String path = SearchEngine.getPath().toString();
				Path filePath = Paths.get(path + "\\" + doc).toAbsolutePath();
				try {
					Desktop.getDesktop().open(filePath.toFile());
				} catch (IOException e1) {
					System.out.println("No such file.");
				}
			}
		}
	}

	private void listActions(){
		list.addMouseListener(new MouseAdapter(){
			@Override
			public void mouseClicked(MouseEvent e) {
				if(e.getClickCount() == 2) {
					int index = list.locationToIndex(e.getPoint());
					openSelectedFile(index);
				}
			}
		});
		list.addKeyListener(new KeyAdapter(){
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				if(e.getKeyCode() == KeyEvent.VK_ENTER){
					int index = list.getSelectedIndex();
					openSelectedFile(index);
				}
			}
		});
	}

	private void btnCloseActions(){
		btnClose.addActionListener(new ActionListener(){
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				if(e.getSource() == btnClose) {
					//Figure out how to close just this window with the button
					System.out.println("CLOSEING btnClose");
					close();

				}
			}
		});
	}
}
